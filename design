/** 
    * Renderer
    *  loops the drawing constantly
    *  inherintly creates the animation by other props changing and getting picked up
    *  having this means that we dont need to explicitly call the drawing except for in the renderer
    * GameWrapper - might not be the final name for this
    *  held by the renderer
    *  hold game controls logic (settings, level, play button etc) and buttons (clickable areas)
    *  hold game logic object to be called when user interacts with game controls(level select, play button etc)
    *  binds user controls to game logic actions
    *  holds a camera and drawer and drawing util
    * Game Object
    *  holds reality of the game logic and data
    *  reality objects, collision detection functions, user actions, etc
    * Camera
    *  (x,y) point and (w,l) values to specify the rectangle of the 2d reality that is to be displayed on the canvas
    *  this rectangle gets scaled to the canvas for drawing by the Drawing Util
    * GameDrawer
    *  held by the game wrapper object
    *  logic to use the drawing util and canvasUtil to draw each specific drawing needed
    *  loads images etc
    * DrawingUtil
    *  hold logic for scaling camera pane view to the canvas
    *  logic is specific to each canvas drawing funcition
    *  uses canvasutil to draw everything
    *  doesnt hold reference to the context
    * Clickable areas
    *  object holding the clickable areas of the canvas
    *  basically a list of clickable areas and some extra functions
    * Clickable area
    *  object holding one clickable area of the canvas
    *  holds for where to trigger, what to do on a miss and what to do on a success
    * Drawing Stack
    *  held by the gameWrapper for knowing what order to draw things in
    *  might need more details for what things are where?
*/